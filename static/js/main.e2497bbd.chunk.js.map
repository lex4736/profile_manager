{"version":3,"sources":["components/search.js","components/heading.js","utils/api.js","components/body.js","components/table.js","components/content.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","handleSearchChange","className","type","placeholder","aria-label","onChange","e","Heading","axios","get","Body","users","formatDate","date","dateArray","split","year","join","undefined","name","map","login","picture","phone","email","dob","data-th","src","medium","alt","first","last","href","target","uuid","Table","headings","handleSort","id","width","style","onClick","toLowerCase","Content","state","order","filteredUsers","heading","setState","sortedUsers","sort","a","b","localeCompare","event","console","log","value","filter","filteredList","item","Object","values","indexOf","API","then","results","data","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2497bbd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction SearchBox({ handleSearchChange }) {\r\n  return (\r\n    <div className=\"searchbox\">\r\n      <form className=\"form-inline\">\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n          onChange={e => handleSearchChange(e)}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default SearchBox;","import React from \"react\";\r\nimport SearchBox from \"./search\";\r\n\r\n\r\nfunction Heading({ handleSearchChange }) {\r\n  return (\r\n    <nav>\r\n      <div>\r\n        <SearchBox handleSearchChange={handleSearchChange} />\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Heading;","  \r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  \r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=150&nat=us\");\r\n  }\r\n};","import React from \"react\";\r\n\r\n\r\nfunction Body({ users }) {\r\n  function formatDate(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    const formattedDate = [month, day, year].join(\"-\");\r\n    return formattedDate;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {users[0] !== undefined && users[0].name !== undefined ? (\r\n        users.map(({ login, name, picture, phone, email, dob }) => {\r\n          return (\r\n            <tr key={login.uuid}>\r\n              <td data-th=\"Image\" className=\"align-middle\">\r\n                <img\r\n                  src={picture.medium}\r\n                  alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                  className=\"img-responsive\"\r\n                />\r\n              </td>\r\n              <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                {name.first} {name.last}\r\n              </td>\r\n              <td data-th=\"Phone\" className=\"align-middle\">\r\n                {phone}\r\n              </td>\r\n              <td data-th=\"Email\" className=\"align-middle\">\r\n                <a href={\"mailto:\" + email} target=\"__blank\">\r\n                  {email}\r\n                </a>\r\n              </td>\r\n              <td data-th=\"DOB\" className=\"align-middle\">\r\n                {formatDate(dob.date)}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default Body;","import React from \"react\";\r\nimport Body from \"./body\";\r\n\r\n\r\nfunction Table({ headings, users, handleSort }) {\r\n  return (\r\n    <div className=\"datatable mt-5\">\r\n      <table\r\n        id=\"table\"\r\n        className=\"table table-striped table-hover table-condensed\"\r\n      >\r\n        <thead className=\"thead2\">\r\n          <tr>\r\n            {headings.map(({ name, width }) => {\r\n              return (\r\n                <th\r\n                  className=\"col\"\r\n                  key={name}\r\n                  style={{ width }}\r\n                  onClick={() => {\r\n                    handleSort(name.toLowerCase());\r\n                  }}\r\n                >\r\n                  {name}\r\n                  <span className=\"pointer\"></span>\r\n                </th>\r\n              );\r\n            })}\r\n          </tr>\r\n        </thead>\r\n\r\n        <Body users={users} />\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { Component } from \"react\";\r\nimport Heading from \"./heading\";\r\nimport API from \"../utils/api\";\r\nimport Table from \"./table\";\r\n\r\n\r\n\r\nexport default class Content extends Component {\r\n  state = {\r\n    users: [{}],\r\n    order: \"descend\",\r\n    filteredUsers: [{}]\r\n  }\r\n\r\n  headings = [\r\n    { name: \"Image\"},\r\n    { name: \"Name\"},\r\n    { name: \"Phone\"},\r\n    { name: \"Email\"},\r\n    { name: \"DOB\"}\r\n  ]\r\n\r\n  handleSort = heading => {\r\n    if (this.state.order === \"descend\") {\r\n      this.setState({\r\n        order: \"ascend\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        order: \"descend\"\r\n      })\r\n    }\r\n\r\n    const compareFnc = (a, b) => {\r\n      if (this.state.order === \"ascend\") {\r\n        \r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n      \r\n        else if (heading === \"name\") {\r\n          return a[heading].first.localeCompare(b[heading].first);\r\n        } else {\r\n          return a[heading] - b[heading];\r\n        }\r\n      } else {\r\n        \r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n       \r\n        else if (heading === \"name\") {\r\n          return b[heading].first.localeCompare(a[heading].first);\r\n        } else {\r\n          return b[heading] - a[heading];\r\n        }\r\n      }\r\n\r\n    }\r\n    const sortedUsers = this.state.filteredUsers.sort(compareFnc);\r\n    this.setState({ filteredUsers: sortedUsers });\r\n  }\r\n\r\n  handleSearchChange = event => {\r\n    console.log(event.target.value);\r\n    const filter = event.target.value;\r\n    const filteredList = this.state.users.filter(item => {\r\n      \r\n      let values = Object.values(item)\r\n        .join(\"\")\r\n        .toLowerCase();\r\n      return values.indexOf(filter.toLowerCase()) !== -1;\r\n    });\r\n    this.setState({ filteredUsers: filteredList });\r\n  }\r\n\r\n  componentDidMount() {\r\n    API.getUsers().then(results => {\r\n      this.setState({\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Heading handleSearchChange={this.handleSearchChange} />\r\n        <div className=\"data-area\">\r\n          <Table\r\n            headings={this.headings}\r\n            users={this.state.filteredUsers}\r\n            handleSort={this.handleSort}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport \"./App.css\";\nimport Content from \"./components/content\";\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"container02\">\n    \n      <h1> PROFILE MANAGER </h1>\n                Below you can view information regarding existing employees. Use the filter option to find a specific employee or click on the \"name\" column to sort through the employees\n                <br></br><br></br>\n        <Content />\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker.js';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}